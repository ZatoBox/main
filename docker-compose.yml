version: '3.8'

services:
  ocr-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ocr-backend
    ports:
      - "8001:5000"  # Puerto externo 8001, interno 5000
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app:/app/yolov5
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/5/tessdata
      - PORT=5000
    volumes:
      # Persistent storage volumes
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./data:/app/data
      # Model updates (optional)
      - ./models:/app/models
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ocr-network
    depends_on:
      - redis

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ocr-redis
    ports:
      - "6380:6379"  # Puerto alternativo para evitar conflictos
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - ocr-network

  # Nginx reverse proxy para producci√≥n
  nginx:
    image: nginx:alpine
    container_name: ocr-nginx
    ports:
      - "8080:80"   # Puerto web alternativo
      - "8443:443"  # Puerto HTTPS alternativo
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ocr-backend
    restart: unless-stopped
    networks:
      - ocr-network

networks:
  ocr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local