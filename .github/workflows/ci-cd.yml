name: CI/CD Pipeline - ZatoBox

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  FRONTEND_PORT: 5173
  BACKEND_PORT: 4444

jobs:
  # Job de calidad de c√≥digo
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm run install:all
        
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
        
    - name: Check TypeScript
      run: |
        cd frontend
        npx tsc --noEmit
        
    - name: Check backend syntax
      run: |
        cd backend
        node -c test-server.js

  # Job de testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm run install:all
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test
      continue-on-error: true
        
    - name: Run backend tests
      run: |
        cd backend
        npm run test
      continue-on-error: true

  # Job de build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm run install:all
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r frontend/dist/* deployment/
        cp -r backend deployment/
        cp scripts/* deployment/
        cp package.json deployment/
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment/

  # Job de testing de integraci√≥n
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    env:
      BACKEND_PORT: 4444
    
    services:
      node:
        image: node:18
        options: >-
          --health-cmd "curl -f http://localhost:4444/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 4444:4444
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm run install:all
        
    - name: Start backend server
      run: |
        cd backend
        node test-server.js &
        sleep 10
        
    - name: Test backend health
      run: |
        curl -f http://localhost:4444/health
        
    - name: Test API endpoints
      run: |
        # Test registration
        curl -X POST http://localhost:4444/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@test.com","password":"test123","fullName":"Test User"}' \
          -w "\nHTTP Status: %{http_code}\n"
          
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Job de deployment (solo en main)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: deployment/
        
    - name: Deploy to server
      run: |
        echo "Deployment would happen here"
        echo "Configure your deployment target in this step"
        # Example deployment commands:
        # - rsync deployment/ user@server:/var/www/zatobox/
        # - ssh user@server "cd /var/www/zatobox && ./start.sh"
        
    - name: Notify deployment
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "Frontend: https://yourdomain.com"
        echo "Backend: https://api.yourdomain.com"

  # Job de notificaci√≥n
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify success
      if: success()
      run: |
        echo "‚úÖ All jobs completed successfully!"
        echo "üéâ ZatoBox is ready for production!"
        
    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå Some jobs failed!"
        echo "Please check the logs for details." 